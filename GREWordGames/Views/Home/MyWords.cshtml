@{
    ViewData["Title"] = "My Words";
}

@model WordViewModel

<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>

@using (Html.BeginForm("GoToHome", "Home", FormMethod.Post))
{{
    <button class="btn btn-primary" type="submit">Home</button>
}}

@using (Html.BeginForm("GoToLogin", "Home", FormMethod.Post))
{{
    <button class="btn btn-primary" type="submit">Login</button>
}}

@using (Html.BeginForm("GoToRegister", "Home", FormMethod.Post))
{{
    <button class="btn btn-primary" type="submit">Register</button>
}}

@using (Html.BeginForm("AddWordAction", "Home", FormMethod.Post))
{{
    <label for="Name" class="form-label">Add Word</label>
    @Html.TextBoxFor(model => model.AddWord.Word, new { @class = "form-control", @placeholder = "Add A Word" })

    <button class="btn btn-primary" type="submit">Add Word</button>
}}

<div id="notificationBar"></div>

<script>
    var modelOutput = @Html.Raw(Json.Serialize(Model));
    var message = modelOutput.message.notificationMessage;

    var messageBar = document.getElementById("notificationBar")
    messageBar.innerHTML = message;

</script>

<table class="table" id="table">
    <thead>
        <tr>
            <th scope="col"><button class="btn btn-primary" onclick="sortByDateAdded()">Sr No.</button></th>
            <th scope="col"><button class="btn btn-primary" onclick="sortByWord()">Words</button></th>
            <th scope="col"><button class="btn btn-primary" onclick="sortByDateAdded()">Date Added</button></th>
            <th scope="col"><button class="btn btn-primary" onclick="sortByProficiency()">Proficiency</button></th>
            <th scope="col">Delete</th>
        </tr>
    </thead>
    <tbody>
        
    </tbody>
</table>

<script type="text/javascript" src="~/js/Scripts/programs.js"></script>

<script>
    var modelOutput = @Html.Raw(Json.Serialize(Model));

    var userMetadataRaw = modelOutput.userMetadata;

    var table = document.getElementById("table");

    var wordIndexes = [[], [], [], []];

    wordIndexes[1] = userMetadataRaw.words.slice(1, (userMetadataRaw.words.length) - 1).split(", ");
    wordIndexes[2] = userMetadataRaw.dateAdded.slice(1, (userMetadataRaw.dateAdded.length) - 1).split(", ");
    wordIndexes[3] = userMetadataRaw.proficiency.slice(1, (userMetadataRaw.proficiency.length) - 1).split(", ");
    wordIndexes[0] = Array.from(Array(wordIndexes[1].length).keys());
    for (let i = 0; i < wordIndexes[3].length; i++) {
        wordIndexes[3][i] = ConvertToProficiency(wordIndexes[3][i]);
    }

    var sortedByDateAdded = true;
    var sortedByWords = false;
    var sortedByProficiency = false;

    PopulateTable();

    function RefreshTable() {
        $.ajax({
            url: "/GoToMyWords",
            type: "POST"
        })
    }

    function PopulateTable()
    {
        var table = document.getElementById("table").getElementsByTagName("tbody")[0];
        for (let i = 0; i < wordIndexes[0].length; i++) {
            var row = table.insertRow(i);

            var cell0 = row.insertCell(0);
            var cell1 = row.insertCell(1);
            var cell2 = row.insertCell(2);
            var cell3 = row.insertCell(3);
            var cell4 = row.insertCell(4);

            cell0.innerHTML = wordIndexes[0][i] + 1;
            cell1.innerHTML = wordIndexes[1][i];

            var dateDifferenceMS = Date.now() - Date.parse(wordIndexes[2][i] + "Z");
            var dateDifference = new Date(dateDifferenceMS).toISOString();

            differenceString = HowOld(dateDifference);

            cell2.innerHTML = differenceString;

            cell3.innerHTML = wordIndexes[3][i].toString() + "%";

            cell4.innerHTML = "<button class='btn btn-primary' onClick='deleteWord(" + wordIndexes[0][i].toString() + ")'>Delete</button>";
        }
    }

    function sortByWord() {
        var sortReverse = true;
        var columnToBeSortedBy = 1;
        if (sortedByWords == true) {
            sortedByWords = false;
        }
        else {
            sortReverse = false;
            sortedByWords = true;
            sortedByDateAdded = false;
            sortedByProficiency = false;
        }

        wordIndexes = SortByRow(columnToBeSortedBy, wordIndexes, sortReverse);
        console.log(wordIndexes);
        $("table tbody tr").remove();
        PopulateTable();
    }

    function sortByDateAdded() {
        var sortReverse = true;
        var columnToBeSortedBy = 0;
        if (sortedByDateAdded == true) {
            sortedByDateAdded = false;
        }
        else {
            sortReverse = false;
            sortedByDateAdded = true;
            sortedByWords = false;
            sortedByProficiency = false;
        }

        wordIndexes = SortByRow(columnToBeSortedBy, wordIndexes, sortReverse);
        console.log(wordIndexes);
        $("table tbody tr").remove();
        PopulateTable();
    }

    function sortByProficiency() {
        var sortReverse = true;
        var columnToBeSortedBy = 3;
        if (sortedByProficiency == true) {
            sortedByProficiency = false;
        }
        else {
            sortReverse = false;
            sortedByProficiency = true;
            sortedByDateAdded = false;
            sortedByWords = false;
        }

        wordIndexes = SortByRow(columnToBeSortedBy, wordIndexes, sortReverse);
        console.log(wordIndexes);
        $("table tbody tr").remove();
        PopulateTable();
    }

    function deleteWord(id) {

        var messageBar = document.getElementById("notificationBar");

        $.ajax({
            url: "/DeleteWord",
            type: "GET",
            data: { id: id }
        }).done(response => {
            if (response.success) {
                messageBar.innerHTML = "Deleted Word";
                window.location.reload(true);
            }
            else {
                messageBar.innerHTML = "Unexpected Error Occured";
            }
        }).fail(response => {
            messageBar.innerHTML = "Unexpected Error Occured";
        });
    }

</script>