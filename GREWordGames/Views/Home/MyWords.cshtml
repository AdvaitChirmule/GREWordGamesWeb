@{
    ViewData["Title"] = "My Words";
}

@model WordViewModel

<div class="w-100 h-100 d-flex justify-content-center bg-light p-3">
    <div class="w-75">
        <!--
        <div class="round-login bg-white mb-3 p-3">
            <div class="container bg-white round-login h-15 w-100">
                <div class="row">
                    <div class="col-sm-4 bg-white">
                        <div class="container">
                            <div class="row container both">
                                <div class="col-sm-4">
                                    📒
                                </div>
                                <div class="col-sm-8">
                                    <div class="container">
                                        <div class="row" id="wordCount">
                                        </div>
                                        <div class="row">
                                            Words
                                        </div>
                                        <div class="row">
                                            ⬆ beating 43% of people
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 bg-white">
                        <div class="container">
                            <div class="row">
                                <div class="col-sm-4">
                                    📆
                                </div>
                                <div class="col-sm-8">
                                    <div class="container">
                                        <div class="row" id="wordCount">
                                        </div>
                                        <div class="row">
                                            Words
                                        </div>
                                        <div class="row">
                                            ⬆ beating 43% of people
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 bg-white">
                        <div class="container">
                            <div class="row">
                                <div class="col-sm-4 mb-3 d-flex justify-content-center">
                                    <img class="img-fluid rounded-circle" src="~/images/Words.png" />
                                </div>
                                <div class="col-sm-8">
                                    <div class="container">
                                        <div class="row" id="wordCount">
                                        </div>
                                        <div class="row">
                                            Words
                                        </div>
                                        <div class="row">
                                            ⬆ beating 43% of people
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        -->
        <div class="container round-login bg-white mb-3 p-3">
            <div class="row large-large-font">
                My Words
            </div>
            <div class="row">
                <br />
                This is where you compile all your words. Use the input box to simply add whatever word you want to add to your own database. You can also view when you added a word and track how well you did with that word. 
                <br /><br />
                You can also sort by word, date added or proficiency to organize more efficienctly. 
                <br /><br />
            </div>
            <div class="row p-3 small-rounded-border">
                <table class="table" id="table">
                    <thead>
                        <tr style="min-width: 50px">
                            @using (Html.BeginForm("AddWordAction", "Home", FormMethod.Post))
                            {
                                {
                                    <th colspan="4" class="p-0">
                                        @Html.TextBoxFor(model => model.AddWord.Word, new { @class = "form-control", @placeholder = "Add Word" })
                                    </th>
                                    <th colspan="1" class="p-0">
                                        <button class="btn primary-button w-100" type="submit">Add Word</button>
                                    </th>
                                }
                            }
                        </tr>
                        <tr style="height: 40px">
                            <th colspan="5" class="p-2">
                                <div id="notificationBar"></div>
                            </th>
                        </tr>
                        <tr class="primary-background">
                            <th class="t-col-1 px-0"><button class="btn primary-button-variant w-100 d-flex justify-content-start" onclick="sortByDateAdded()">⇅ Sr No.</button></th>
                            <th class="t-col-4 px-0"><button class="btn primary-button-variant w-100 d-flex justify-content-start" onclick="sortByWord()">⇅ Words</button></th>
                            <th class="t-col-2 px-0"><button class="btn primary-button-variant w-100 d-flex justify-content-start" onclick="sortByDateAdded()">⇅ Date Added</button></th>
                            <th class="t-col-2 px-0"><button class="btn primary-button-variant w-100 d-flex justify-content-start" onclick="sortByProficiency()">⇅ Proficiency</button></th>
                            <th class="t-col-2 px-0"><button class="btn primary-button-variant w-100 d-flex justify-content-start" disabled>Delete</button></th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" src="~/js/Scripts/programs.js"></script>

<script>
    var modelOutput = @Html.Raw(Json.Serialize(Model));
    var message = modelOutput.message.notificationMessage;

    var messageBar = document.getElementById("notificationBar")
    messageBar.innerHTML = message;

</script>

<script>
    var modelOutput = @Html.Raw(Json.Serialize(Model));

    var userMetadataRaw = modelOutput.userMetadata;

    //var wordCount = document.getElementById("wordCount");
    //var wordCountLastWeek = document.getElementById("wordCountLastWeek");
    //var proficiencyLastWeek = document.getElementById("proficiencyLastWeek");

    //wordCount.innerText = userMetadataRaw.words.length.toString();
    //wordCountLastWeek.innerText = userMetadataRaw.words.length.toString();
    //proficiencyLastWeek.innerText = "0%";

    var table = document.getElementById("table");

    var wordIndexes = [[], [], [], []];

    wordIndexes[1] = userMetadataRaw.words.slice(1, (userMetadataRaw.words.length) - 1).split(", ");
    wordIndexes[2] = userMetadataRaw.dateAdded.slice(1, (userMetadataRaw.dateAdded.length) - 1).split(", ");
    wordIndexes[3] = userMetadataRaw.proficiency.slice(1, (userMetadataRaw.proficiency.length) - 1).split(", ");
    wordIndexes[0] = Array.from(Array(wordIndexes[1].length).keys());
    for (let i = 0; i < wordIndexes[3].length; i++) {
        wordIndexes[1][i] = CapitalizeFirstLetter(wordIndexes[1][i]);
        wordIndexes[3][i] = ConvertToProficiency(wordIndexes[3][i]);
    }

    var sortedByDateAdded = true;
    var sortedByWords = false;
    var sortedByProficiency = false;

    PopulateTable();

    function RefreshTable() {
        $.ajax({
            url: "/GoToMyWords",
            type: "POST"
        })
    }

    function PopulateTable()
    {
        var table = document.getElementById("table").getElementsByTagName("tbody")[0];
        for (let i = 0; i < wordIndexes[0].length; i++) {
            var row = table.insertRow(i);

            var cell0 = row.insertCell(0);
            var cell1 = row.insertCell(1);
            var cell2 = row.insertCell(2);
            var cell3 = row.insertCell(3);
            var cell4 = row.insertCell(4);

            cell0.innerHTML = wordIndexes[0][i] + 1;
            cell1.innerHTML = wordIndexes[1][i];

            var dateDifferenceMS = Date.now() - Date.parse(wordIndexes[2][i] + "Z");
            var dateDifference = new Date(dateDifferenceMS).toISOString();

            differenceString = HowOld(dateDifference);

            cell2.innerHTML = differenceString;

            cell3.innerHTML = wordIndexes[3][i].toString() + "%";

            cell4.innerHTML = "<button class='btn secondary-button' onClick='deleteWord(" + wordIndexes[0][i].toString() + ")'>Delete</button>";
        }
    }

    function sortByWord() {
        var sortReverse = true;
        var columnToBeSortedBy = 1;
        if (sortedByWords == true) {
            sortedByWords = false;
        }
        else {
            sortReverse = false;
            sortedByWords = true;
            sortedByDateAdded = false;
            sortedByProficiency = false;
        }

        wordIndexes = SortByRow(columnToBeSortedBy, wordIndexes, sortReverse);
        console.log(wordIndexes);
        $("table tbody tr").remove();
        PopulateTable();
    }

    function sortByDateAdded() {
        var sortReverse = true;
        var columnToBeSortedBy = 0;
        if (sortedByDateAdded == true) {
            sortedByDateAdded = false;
        }
        else {
            sortReverse = false;
            sortedByDateAdded = true;
            sortedByWords = false;
            sortedByProficiency = false;
        }

        wordIndexes = SortByRow(columnToBeSortedBy, wordIndexes, sortReverse);
        console.log(wordIndexes);
        $("table tbody tr").remove();
        PopulateTable();
    }

    function sortByProficiency() {
        var sortReverse = true;
        var columnToBeSortedBy = 3;
        if (sortedByProficiency == true) {
            sortedByProficiency = false;
        }
        else {
            sortReverse = false;
            sortedByProficiency = true;
            sortedByDateAdded = false;
            sortedByWords = false;
        }

        wordIndexes = SortByRow(columnToBeSortedBy, wordIndexes, sortReverse);
        console.log(wordIndexes);
        $("table tbody tr").remove();
        PopulateTable();
    }

    function deleteWord(id) {

        var messageBar = document.getElementById("notificationBar");

        $.ajax({
            url: "/DeleteWord",
            type: "GET",
            data: { id: id }
        }).done(response => {
            if (response.success) {
                messageBar.innerHTML = "Deleted Word";
                window.location.reload(true);
            }
            else {
                messageBar.innerHTML = "Unexpected Error Occured";
            }
        }).fail(response => {
            messageBar.innerHTML = "Unexpected Error Occured";
        });
    }

</script>