
@{
    ViewData["Title"] = "Practice";
}

@model AllWords

<h1>Practice</h1>

<div class="container">
    <div class="row">
        <div class="flipCard">
            <div class="flipCardInner" id="cardFlip">
                <div class="flipCardFront">
                    <button class="btn secondary-button h-100 w-100" id="wordPlaceholder" onclick="submitWord()">Submit</button>
                </div>
                <div class="flipCardBack white-background" id="wordMeaningPlaceholder">
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <button class="btn btn-primary" id="wrongButton" onclick="registerWrongAndGetNewWord()"><img src="~/images/Wrong.png" class="fit-image"/></button>
        </div>
        <div class="col-sm">
            <button class="btn btn-primary" id="rightButton" onclick="registerRightAndGetNewWord()"><img src="~/images/Right.png" class="fit-image" /></button>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    var wordOutput = @Html.Raw(Json.Serialize(Model));

    var wordPlaceholder = document.getElementById("wordPlaceholder")
    var wordMeaningPlaceholder = document.getElementById("wordMeaningPlaceholder")

    var submitButton = document.getElementById("wordPlaceholder")
    var wrongButton = document.getElementById("wrongButton")
    var rightButton = document.getElementById("rightButton")

    submitButton.disabled = false;
    wrongButton.disabled = true;
    rightButton.disabled = true;

    if (wordOutput.words.length == 0) {
        practiceArea.innerText = "No words added";
    }
    else {
        wordPlaceholder.innerText = wordOutput.words[0];
    }

    var wordIndex = 0;
    var lastWordCache = "";
    var wordMeaning = "";

    $.ajax({
        url: "/GetNextWord",
        type: "GET",
        data: { word: wordOutput.words[wordIndex] }
    }).done(response => {
        if (response.success) {
            wordMeaning = response.wordMeaning;
            lastWordCache = wordOutput.words[wordIndex]
        }
        else {
            wordMeaning = "Unexpected Error Occured";
            lastWordCache = "";
        }
    }).fail(response => {
        wordMeaning = "Unexpected Error Occured";
        lastWordCache = "";
    })

    function submitWord() {
        async function waitForCondition() {
            while (lastWordCache !== wordOutput.words[wordIndex]) {
                console.log("waiting");
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second
            }
        }

        waitForCondition()

        var card = document.getElementById("cardFlip")
        card.classList.toggle("flipped");

        wordMeaningPlaceholder.innerText = wordMeaning;

        submitButton.disabled = true;
        wrongButton.disabled = false;
        rightButton.disabled = false;
    }

    function registerWrongAndGetNewWord() {
        wrongButton.disabled = true;
        rightButton.disabled = true;
        wordIndex = wordIndex + 1;

        if (wordIndex == wordOutput.words.length) {
            $.ajax({
                url: "/RegisterWrong",
                type: "GET",
            }).done(response => {
                if (response.success) {
                    submitButton.disabled = true;
                    wrongButton.disabled = true;
                    rightButton.disabled = true;
                    completeGame();
                }
                else {
                    wordMeaning = "Unexpected Error Occured";
                    lastWordCache = "";
                }
            }).fail(response => {
                wordMeaning = "Unexpected Error Occured";
                lastWordCache = "";
            })
        }
        else {
            wordPlaceholder.innerText = wordOutput.words[wordIndex]
            wordMeaningPlaceholder.innerText = "";

            $.ajax({
                url: "/GetNextWord",
                type: "GET",
                data: { word: wordOutput.words[wordIndex] }
            }).done(response => {
                if (response.success) {
                    wordMeaning = response.wordMeaning;
                    lastWordCache = wordOutput.words[wordIndex]

                    $.ajax({
                        url: "/RegisterWrong",
                        type: "GET",
                    }).done(response => {
                        if (response.success) {
                            submitButton.disabled = false;
                        }
                        else {
                            wordMeaning = "Unexpected Error Occured";
                            lastWordCache = "";
                        }
                    }).fail(response => {
                        wordMeaning = "Unexpected Error Occured";
                        lastWordCache = "";
                    })
                }
                else {
                    wordMeaning = "Unexpected Error Occured";
                    lastWordCache = "";
                }
            }).fail(response => {
                wordMeaning = "Unexpected Error Occured";
                lastWordCache = "";
            })
        }

        var card = document.getElementById("cardFlip")
        card.classList.toggle("flipped");
    }

    function registerRightAndGetNewWord() {
        wrongButton.disabled = true;
        rightButton.disabled = true;
        wordIndex = wordIndex + 1;

        if (wordIndex == wordOutput.words.length) {
            $.ajax({
                url: "/RegisterRight",
                type: "GET",
            }).done(response => {
                if (response.success) {
                    submitButton.disabled = true;
                    wrongButton.disabled = true;
                    rightButton.disabled = true;
                    completeGame();
                }
                else {
                    wordMeaning = "Unexpected Error Occured";
                    lastWordCache = "";
                }
            }).fail(response => {
                wordMeaning = "Unexpected Error Occured";
                lastWordCache = "";
            })
        }
        else {
            wordPlaceholder.innerText = wordOutput.words[wordIndex]
            wordMeaningPlaceholder.innerText = "";

            $.ajax({
                url: "/GetNextWord",
                type: "GET",
                data: { word: wordOutput.words[wordIndex] }
            }).done(response => {
                if (response.success) {
                    wordMeaning = response.wordMeaning;
                    lastWordCache = wordOutput.words[wordIndex]

                    $.ajax({
                        url: "/RegisterRight",
                        type: "GET",
                    }).done(response => {
                        if (response.success) {
                            submitButton.disabled = false;
                        }
                        else {
                            wordMeaning = "Unexpected Error Occured";
                            lastWordCache = "";
                        }
                    }).fail(response => {
                        wordMeaning = "Unexpected Error Occured";
                        lastWordCache = "";
                    })
                }
                else {
                    wordMeaning = "Unexpected Error Occured";
                    lastWordCache = "";
                }
            }).fail(response => {
                wordMeaning = "Unexpected Error Occured";
                lastWordCache = "";
            })

            submitButton.disabled = false;
            wrongButton.disabled = true;
            rightButton.disabled = true;
        }

        var card = document.getElementById("cardFlip")
        card.classList.toggle("flipped");
    }

    function completeGame() {
        wordPlaceholder.innerText = "";
        wordMeaningPlaceholder.innerText = "COMPLETED GAME!";
        $.ajax({
            url: '/CompleteGame',
            type: 'GET'
        }).done(response => {
            if (!response.success) {
                wordMeaningPlaceholder.innerText = "Unexpected Error occured, couldn't register results";
            }
            else {
                wordMeaningPlaceholder.innerText = "But this is over";
            }
        })
    }
</script>