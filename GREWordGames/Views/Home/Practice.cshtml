
@{
    ViewData["Title"] = "Practice";
}

@model AllWords

<div class="w-100 h-100 bg-light d-flex justify-content-center align-items-center">
    <div class="container bg-white w-75 h-75">
        <div class="row w-100 h-100">
            <div class="col-sm-4 bg-white">
                <div class="container h-100">
                    <div class="row h-10"></div>
                    <div class="row h-20 d-flex justify-content-center align-items-start">
                        <div class="d-flex justify-content-center"><b>Word</b></div>
                        <div class="d-flex justify-content-center large-large-font" id="wordAt"></div>
                    </div>
                    <div class="row h-10"></div>
                    <div class="row h-20 d-flex justify-content-center align-items-center">
                        <div id="dateStarted"></div>
                        <div id="successRate"></div>
                        <div><b>All Words:</b></div>
                    </div>
                    <div class="row h-40 p-3" id="tickButtons">
                        <div class="col-sm h-100" id="tickButtonGroup0"></div>
                        <div class="col-sm h-100" id="tickButtonGroup1"></div>
                        <div class="col-sm h-100" id="tickButtonGroup2"></div>
                        <div class="col-sm h-100" id="tickButtonGroup3"></div>
                    </div>
                </div>
            </div>
            <div class="col-sm-8 p-0">
                <div class="row w-100 h-50">
                    <div class="flipCard w-100 h-100 p-0">
                        <div class="flipCardInner" id="cardFlip">
                            <div class="flipCardFront">
                                <button class="btn secondary-button h-100 w-100 large-large-font" id="wordPlaceholder" onclick="submitWord()">Submit</button>
                            </div>
                            <div class="flipCardBack white-background" id="wordMeaningPlaceholder">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row w-100 h-50">
                    <div class="col-sm w-50 h-100">
                        <button class="btn p-0 mb-0 bg-white w-100 h-100 p-5" id="wrongButton" onclick="registerWrongAndGetNewWord()"><img src="~/images/Wrong.png" class="fit-image" /></button>
                    </div>
                    <div class="col-sm w-50 h-100">
                        <button class="btn p-0 mb-0 bg-white w-100 h-100 p-5" id="rightButton" onclick="registerRightAndGetNewWord()"><img src="~/images/Right.png" class="fit-image" /></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript" src="~/js/Scripts/programs.js"></script>

<script>
    var wordOutput = @Html.Raw(Json.Serialize(Model));

    var wordPlaceholder = document.getElementById("wordPlaceholder")
    var wordMeaningPlaceholder = document.getElementById("wordMeaningPlaceholder")

    var submitButton = document.getElementById("wordPlaceholder")
    var wrongButton = document.getElementById("wrongButton")
    var rightButton = document.getElementById("rightButton")

    submitButton.disabled = false;
    wrongButton.disabled = true;
    rightButton.disabled = true;

    if (wordOutput.words.length == 0) {
        practiceArea.innerText = "No words added";
    }
    else {
        wordPlaceholder.innerText = CapitalizeFirstLetter(wordOutput.words[0]);
    }

    var wordIndex = 0;
    var percNum = 0;
    var percDen = 0;
    var lastWordCache = "";
    var wordMeaning = "";

    var wordAt = document.getElementById("wordAt");
    wordAt.innerText = "1";

    var dateStarted = document.getElementById("dateStarted");
    var dateUnits = new Date(Date.now());
    dateStarted.innerHTML = "<b>Session Started:</b> " + dateUnits.toLocaleString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: 'numeric',
        minute: '2-digit',
        hour12: true
    });

    var successRate = document.getElementById("successRate");
    successRate.innerHTML = "<b>Success Rate:</b> 100%";
    
    for (let i = 0; i < 4; i++) {
        var tickButtons = document.getElementById("tickButtonGroup" + i.toString());
        var tickButtonHTML = "";

        for (let j = 0; j < 5; j++) {
            var idName = "tick" + (i*5+j).toString();
            tickButtonHTML = tickButtonHTML + '<div class="large-font h-20"><span class="neutral-color" id="' + idName + '">●</span> ' + (i * 5 + j + 1) + "</div>"
        }

        tickButtons.innerHTML = tickButtonHTML;
    }

    $.ajax({
        url: "/GetNextWord",
        type: "GET",
        data: { word: wordOutput.words[wordIndex] }
    }).done(response => {
        if (response.success) {
            wordMeaning = response.wordMeaning;
            lastWordCache = wordOutput.words[wordIndex]
        }
        else {
            wordMeaning = "Unexpected Error Occured";
            lastWordCache = "";
        }
    }).fail(response => {
        wordMeaning = "Unexpected Error Occured";
        lastWordCache = "";
    })

    function submitWord() {
        async function waitForCondition() {
            while (lastWordCache !== wordOutput.words[wordIndex]) {
                console.log("waiting");
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second
            }
        }

        waitForCondition()

        var card = document.getElementById("cardFlip")
        card.classList.toggle("flipped");

        wordMeaningPlaceholder.innerText = wordMeaning;

        submitButton.disabled = true;
        wrongButton.disabled = false;
        rightButton.disabled = false;
    }

    function registerWrongAndGetNewWord() {
        wrongButton.disabled = true;
        rightButton.disabled = true;
        wordIndex = wordIndex + 1;

        if (wordIndex == wordOutput.words.length || wordIndex == 20) {
            $.ajax({
                url: "/RegisterWrong",
                type: "GET",
            }).done(response => {
                if (response.success) {
                    submitButton.disabled = true;
                    wrongButton.disabled = true;
                    rightButton.disabled = true;

                    wordAt.innerText = "Complete!";

                    percDen += 1;
                    successRate.innerHTML = "<b>Success Rate:</b> " + (Math.round((100 * percNum) / percDen)).toString() + "%";

                    var tickButtonId = "tick" + (wordIndex - 1).toString();
                    var tickButton = eval(tickButtonId);
                    tickButton.classList.remove('neutral-color');
                    tickButton.classList.add('fall-color');

                    completeGame();
                }
                else {
                    wordMeaning = "Unexpected Error Occured";
                    lastWordCache = "";
                }
            }).fail(response => {
                wordMeaning = "Unexpected Error Occured";
                lastWordCache = "";
            })
        }
        else {
            wordPlaceholder.innerText = CapitalizeFirstLetter(wordOutput.words[wordIndex])
            wordMeaningPlaceholder.innerText = "";

            $.ajax({
                url: "/GetNextWord",
                type: "GET",
                data: { word: wordOutput.words[wordIndex] }
            }).done(response => {
                if (response.success) {
                    wordMeaning = response.wordMeaning;
                    lastWordCache = wordOutput.words[wordIndex]

                    wordAt.innerText = wordIndex + 1;

                    percDen += 1;
                    successRate.innerHTML = "<b>Success Rate:</b> " + (Math.round((100 * percNum) / percDen)).toString() + "%";

                    var tickButtonId = "tick" + (wordIndex - 1).toString();
                    var tickButton = eval(tickButtonId);
                    tickButton.classList.remove('neutral-color');
                    tickButton.classList.add('fall-color');

                    $.ajax({
                        url: "/RegisterWrong",
                        type: "GET",
                    }).done(response => {
                        if (response.success) {
                            submitButton.disabled = false;
                        }
                        else {
                            wordMeaning = "Unexpected Error Occured";
                            lastWordCache = "";
                        }
                    }).fail(response => {
                        wordMeaning = "Unexpected Error Occured";
                        lastWordCache = "";
                    })
                }
                else {
                    wordMeaning = "Unexpected Error Occured";
                    lastWordCache = "";
                }
            }).fail(response => {
                wordMeaning = "Unexpected Error Occured";
                lastWordCache = "";
            })
        }

        var card = document.getElementById("cardFlip")
        card.classList.toggle("flipped");
    }

    function registerRightAndGetNewWord() {
        wrongButton.disabled = true;
        rightButton.disabled = true;
        wordIndex = wordIndex + 1;

        if (wordIndex == wordOutput.words.length || wordIndex == 20) {
            $.ajax({
                url: "/RegisterRight",
                type: "GET",
            }).done(response => {
                if (response.success) {
                    submitButton.disabled = true;
                    wrongButton.disabled = true;
                    rightButton.disabled = true;

                    wordAt.innerText = "Complete!";

                    percNum += 1
                    percDen += 1;
                    successRate.innerHTML = "<b>Success Rate:</b> " + (Math.round((100 * percNum) / percDen)).toString() + "%";

                    var tickButtonId = "tick" + (wordIndex - 1).toString();
                    var tickButton = eval(tickButtonId);
                    tickButton.classList.remove('neutral-color');
                    tickButton.classList.add('rise-color');

                    completeGame();
                }
                else {
                    wordMeaning = "Unexpected Error Occured";
                    lastWordCache = "";
                }
            }).fail(response => {
                wordMeaning = "Unexpected Error Occured";
                lastWordCache = "";
            })
        }
        else {
            wordPlaceholder.innerText = CapitalizeFirstLetter(wordOutput.words[wordIndex])
            wordMeaningPlaceholder.innerText = "";

            $.ajax({
                url: "/GetNextWord",
                type: "GET",
                data: { word: wordOutput.words[wordIndex] }
            }).done(response => {
                if (response.success) {
                    wordMeaning = response.wordMeaning;
                    lastWordCache = wordOutput.words[wordIndex]

                    wordAt.innerText = wordIndex + 1;

                    percNum += 1
                    percDen += 1;
                    successRate.innerHTML = "<b>Success Rate:</b> " + (Math.round((100 * percNum) / percDen)).toString() + "%";

                    var tickButtonId = "tick" + (wordIndex - 1).toString();
                    var tickButton = eval(tickButtonId);
                    tickButton.classList.remove('neutral-color');
                    tickButton.classList.add('rise-color');

                    $.ajax({
                        url: "/RegisterRight",
                        type: "GET",
                    }).done(response => {
                        if (response.success) {
                            submitButton.disabled = false;
                        }
                        else {
                            wordMeaning = "Unexpected Error Occured";
                            lastWordCache = "";
                        }
                    }).fail(response => {
                        wordMeaning = "Unexpected Error Occured";
                        lastWordCache = "";
                    })
                }
                else {
                    wordMeaning = "Unexpected Error Occured";
                    lastWordCache = "";
                }
            }).fail(response => {
                wordMeaning = "Unexpected Error Occured";
                lastWordCache = "";
            })

            submitButton.disabled = false;
            wrongButton.disabled = true;
            rightButton.disabled = true;
        }

        var card = document.getElementById("cardFlip")
        card.classList.toggle("flipped");
    }

    function completeGame() {
        wordPlaceholder.innerText = "";
        wordMeaningPlaceholder.innerText = "COMPLETED GAME!";
        $.ajax({
            url: '/CompleteGame',
            type: 'GET'
        }).done(response => {
            if (!response.success) {
                wordMeaningPlaceholder.innerText = "Unexpected Error occured, couldn't register results";
            }
            else {
                wordMeaningPlaceholder.innerText = "But this is over";
            }
        })
    }
</script>