@{
    ViewData["Title"] = "GameRoom";
}

<div id="timerDiv"></div>
<div id="wordPlaceholder"></div>

<label type="form-label" for="guessWord">Guess Word</label>
<canvas height="300" width="300" id="whiteBoard" class="bg-white"></canvas>
<input type="text" class="form-control" id="guessWord" name="guessWord" disabled/>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>
    var timer = document.getElementById("timerDiv");
    var wordPlaceholder = document.getElementById("wordPlaceholder");
    var inputWord = document.getElementById("guessWord");
    var whiteBoard = document.getElementById("whiteBoard");
    const ctx = whiteBoard.getContext('2d');

    var frameRate = 1000;
    var pauseTime = 5000;
    var roundTime = 30000;

    var startTime = Date.now();

    var drawTime = false;
    var isDrawing = false;

    var rounds = 0;
    var drawIndex = 0;
    var guessIndex = 0;
    var playerTurn = false;

    var ticktock = null;
    var word = "";

    var drawTrue = [];
    var drawString = [];

    var totalFrames = Math.ceil(roundTime / frameRate);

    var lastFrame = 0;

    for (var i = 0; i < totalFrames ; i++) {
        drawTrue.push(false);
        drawString.push("");
    }

    $.ajax({
        url: "/GetStartDetails",
        type: "GET"
    }).done(response => {
        if (response.success) {
            startTime = Date.parse(response.dateTime);
            rounds = response.rounds;
            playerTurn = response.playerTurn;

            ticktock = setInterval(transitionGame, frameRate);

            word = "";

            $.ajax({
                url: "/GetKthWord",
                type: "GET",
                data: { drawIndex: drawIndex }
            }).done(response => {
                if (response.success) {
                    word = response.word;
                }
            });
        }
    });

    function transitionGame() {
        var diff = (startTime - Date.now());
        if (diff < 0) {
            clearInterval(ticktock);
            startTime = startTime + roundTime;
            if (playerTurn) {
                playerTurn = false;
                drawTime = true;
                ticktock = setInterval(drawWord, frameRate);
                isDrawing = false;
                for (var i = 0; i < totalFrames; i++) {
                    drawTrue[i] = false;
                    drawString[i] = "";
                }
                wordPlaceholder.innerText = word;
            }
            else {
                playerTurn = true;
                ticktock = setInterval(guessWord, frameRate);
                inputWord.disabled = false;
            }
        }
        else {
            timer.innerHTML = "Pause" + (Math.ceil(diff / 1000)).toString();
        }
    }

    function guessWord() {
        var diff = (startTime - Date.now());
        if (diff < 0) {
            startTime = startTime + pauseTime;
            clearInterval(ticktock);

            inputWord.disabled = true;

            guessIndex = guessIndex + 1;
            ctx.clearRect(0, 0, whiteBoard.width, whiteBoard.height);
            if (drawIndex == rounds && guessIndex == rounds) {
                completeGame();
            }
            else {
                ticktock = setInterval(transitionGame, frameRate);
            }
        }
        else {
            timer.innerHTML = "Guess" + (Math.ceil(diff / 1000)).toString();

            var completeReading = false;
            while (lastFrame < totalFrames) {
                if (completeReading){
                    break;
                }

                $.ajax({
                    url: "/GetIthFrameDrawing",
                    type: "GET",
                    data: { guessIndex: guessIndex, frameIndex: lastFrame}
                }).done(response => {
                    if (response.success) {
                        var strokeList = response.drawing.Split(';');
                        for (let i = 1; i < strokeList.Count; i++) {
                            var strokes = strokeList[i].Split("|");
                            ctx.moveTo(strokes[0], strokes[1]);
                            ctx.lineTo(strokes[2], strokes[3]);
                        }

                        lastFrame = lastFrame + 1;
                    }
                    else {
                        completeReading = true;
                    }
                }).fail(response => {
                    completeReading = true;
                });
            }
        }
    }

    function drawWord() {
        var diff = (startTime - Date.now());
        if (diff < 0) {
            startTime = startTime + pauseTime;
            drawTime = false;
            ctx.clearRect(0, 0, whiteBoard.width, whiteBoard.height);
            isDrawing = false;
            clearInterval(ticktock);

            drawIndex = drawIndex + 1;
            if (drawIndex == rounds && guessIndex == rounds) {
                completeGame();
            }
            else {
                ticktock = setInterval(transitionGame, frameRate);
                word = "";

                if (drawIndex < rounds) {
                    $.ajax({
                        url: "/GetKthWord",
                        type: "GET",
                        data: { drawIndex: drawIndex }
                    }).done(response => {
                        if (response.success) {
                            word = response.word;
                        }
                    });
                }

                wordPlaceholder.innerText = "";
            }
        }
        else {
            timer.innerHTML = "Draw" + (Math.ceil(diff / 1000)).toString();

            $.ajax({
                url: "/CorrectlyGuessedWord",
                type: "GET",
                data: { drawIndex: drawIndex }
            }).done(response => {
                if (response.success) {
                    var saveTime = response.saveTime;
                    startTime = startTime + pauseTime - saveTime * 1000;
                    drawTime = false;
                    ctx.clearRect(0, 0, whiteBoard.width, whiteBoard.height);

                    clearInterval(ticktock);

                    drawIndex = drawIndex + 1;
                    if (drawIndex == rounds && guessIndex == rounds) {
                        completeGame();
                    }
                    else {
                        ticktock = setInterval(transitionGame, frameRate);
                        word = "";

                        if (drawIndex < rounds) {
                            $.ajax({
                                url: "/GetKthWord",
                                type: "GET",
                                data: { drawIndex: drawIndex }
                            }).done(response => {
                                if (response.success) {
                                    word = response.word;
                                }
                            });
                        }

                        wordPlaceholder.innerText = "";
                    }
                }
            });
        }
    }

    inputWord.addEventListener('keydown', function (event) {
        if (event.key == 'Enter') {
            var saveTime = Math.floor((startTime - Date.now()) / 1000) - 3;
            $.ajax({
                url: "/GuessWord",
                type: "GET",
                data: { word: inputWord.value, guessIndex: guessIndex, saveTime: saveTime }
            }).done(response => {
                if (response.success) {
                    if (response.correct) {
                        startTime = startTime + pauseTime - saveTime * 1000;
                        clearInterval(ticktock);

                        inputWord.disabled = true;

                        guessIndex = guessIndex + 1;
                        if (drawIndex == rounds && guessIndex == rounds) {
                            completeGame();
                        }
                        else {
                            ticktock = setInterval(transitionGame, frameRate);
                        }
                    }
                }
            });

            inputWord.value = "";
        }
    });

    var startX = 0;
    var startY = 0;

    whiteBoard.addEventListener('mousedown', function (e) {
        if (drawTime){
            isDrawing = true;
            startX = e.offsetX;
            startY = e.offsetY;
        }
    })

    whiteBoard.addEventListener('mousemove', function (e) {
        if (isDrawing) {
            ctx.moveTo(startX, startY);
            ctx.lineTo(e.offsetX, e.offsetY);
            ctx.strokeStyle = 'black';
            ctx.lineWidth = 1;
            ctx.stroke();

            var ithFrame = Math.floor((roundTime + Date.now() - startTime) / frameRate);
            if (ithFrame >= 0 && ithFrame < totalFrames) {
                if (ithFrame > 0 && drawTrue[ithFrame - 1] == false) {
                    $.ajax({
                        url: "/RecordIthFrameDrawing",
                        data: { drawIndex: drawIndex, frameIndex: ithFrame, drawing: drawString[ithFrame - 1] }
                    })
                    drawTrue[ithFrame - 1] = true;
                }
                
                drawString[ithFrame] = drawString[ithFrame] + ";" + startX.toString() + "|" + startY.toString() + "|" + e.offsetX.toString() + "|" + e.offsetY.toString();

            }            

            startX = e.offsetX;
            startY = e.offsetY;
        }
    })

    whiteBoard.addEventListener('mouseup', () => isDrawing = false);
    whiteBoard.addEventListener('mouseout', () => isDrawing = false);


    function completeGame() {
        timer.innerHTML = "DONE";
    }

</script>
