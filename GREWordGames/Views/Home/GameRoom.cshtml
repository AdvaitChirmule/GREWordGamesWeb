@{
    ViewData["Title"] = "GameRoom";
}

<div id="timerDiv"></div>
<div id="wordPlaceholder"></div>

<label type="form-label" for="guessWord">Guess Word</label>
<div class="container canvas-frame">
    <div class="row">
        <canvas id="whiteBoard" class="actual-board bg-white"></canvas>
    </div>
    <div class="row canvas-tools p-0">
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(0)" class="black-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(1)" class="brown-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(2)" class="red-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(3)" class="orange-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(4)" class="yellow-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(5)" class="lime-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(6)" class="green-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(7)" class="cyan-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
        </div>
        <div class="col-sm-1 p-5">
            <button onclick="widthSelector(0)" class="black-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-4">
            <button onclick="widthSelector(1)" class="black-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-3">
            <button onclick="widthSelector(2)" class="black-paint h-100 w-100"></button>
        </div>
    </div>

    <div class="row canvas-tools p-0">
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(8)" class="white-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(9)" class="lightgrey-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(10)" class="grey-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(11)" class="pink-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(12)" class="magenta-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(13)" class="purple-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(14)" class="blue-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="colorSelector(15)" class="lightblue-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1">
        </div>
        <div class="col-sm-1 p-2">
            <button onclick="widthSelector(3)" class="black-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-1">
            <button onclick="widthSelector(4)" class="black-paint h-100 w-100"></button>
        </div>
        <div class="col-sm-1 p-0">
            <button onclick="widthSelector(5)" class="black-paint h-100 w-100"></button>
        </div>
    </div>

</div>
<input type="text" class="form-control" id="guessWord" name="guessWord" disabled/>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>
    var timer = document.getElementById("timerDiv");
    var wordPlaceholder = document.getElementById("wordPlaceholder");
    var inputWord = document.getElementById("guessWord");
    var whiteBoard = document.getElementById("whiteBoard");
    const ctx = whiteBoard.getContext('2d');

    var startX = 0;
    var startY = 0;

    var colorId = 0;
    var widthId = 1;
    var colorMap = { "0": "black", "1": "brown", "2": "red", "3": "orange", "4": "yellow", "5": "lime", "6": "green", "7": "cyan", "8": "white", "9": "lightgrey", "10": "grey", "11": "pink", "12": "magenta", "13": "purple", "14": "blue", "15": "lightblue"}

    var frameRate = 1000;
    var pauseTime = 5000;
    var roundTime = 30000;

    var startTime = Date.now();

    var drawTime = false;
    var isDrawing = false;

    var rounds = 0;
    var drawIndex = 0;
    var guessIndex = 0;
    var playerTurn = false;

    var ticktock = null;
    var word = "";

    var totalFrames = Math.ceil(roundTime / frameRate);


    var drawTrue = [];
    var drawString = [];

    var lastFrame = 0;

    function colorSelector(id) {
        colorId = id;
    }

    function widthSelector(id) {
        widthId = parseInt(id);
    }

    for (var i = 0; i < totalFrames ; i++) {
        drawTrue.push(false);
        drawString.push(";");
    }

    $.ajax({
        url: "/GetStartDetails",
        type: "GET"
    }).done(response => {
        if (response.success) {
            startTime = Date.parse(response.dateTime);
            rounds = response.rounds;
            playerTurn = response.playerTurn;

            ticktock = setInterval(transitionGame, frameRate);

            word = "";

            $.ajax({
                url: "/GetKthWord",
                type: "GET",
                data: { drawIndex: drawIndex }
            }).done(response => {
                if (response.success) {
                    word = response.word;
                }
            });
        }
    });

    function transitionGame() {
        diff = (startTime - Date.now());

        ctx.clearRect(0, 0, whiteBoard.width, whiteBoard.height);

        drawTrue = [];
        drawString = [];

        colorId = 0;

        lastFrame = 0;

        for (var i = 0; i < totalFrames; i++) {
            drawTrue.push(false);
            drawString.push(";");
        }

        if (diff < 0) {
            clearInterval(ticktock);
            startTime = startTime + roundTime;
            if (playerTurn) {
                playerTurn = false;
                drawTime = true;
                ticktock = setInterval(drawWord, frameRate);
                isDrawing = false;

                wordPlaceholder.innerText = word;
            }
            else {
                playerTurn = true;
                ticktock = setInterval(guessWord, frameRate);
                inputWord.disabled = false;
            }
        }
        else {
            timer.innerHTML = "Pause" + (Math.ceil(diff / 1000)).toString();
        }
    }

    function guessWord() {
        var diff = (startTime - Date.now());
        if (diff < 0) {
            startTime = startTime + pauseTime;
            clearInterval(ticktock);

            inputWord.disabled = true;

            guessIndex = guessIndex + 1;
            ctx.clearRect(0, 0, whiteBoard.width, whiteBoard.height);
            
            if (drawIndex == rounds && guessIndex == rounds) {
                completeGame();
            }
            else {
                ticktock = setInterval(transitionGame, frameRate);
            }
        }
        else {
            timer.innerHTML = "Guess" + (Math.ceil(diff / 1000)).toString();

            var completeReading = false;
            callFrame()
            
        }
    }

    function callFrame() {
        $.ajax({
            url: "/GetIthFrameDrawing",
            type: "GET",
            data: { guessIndex: guessIndex, frameIndex: lastFrame }
        }).done(response => {
            if (response.success) {
                if (response.drawing && response.drawing != "") {
                    var strokeList = response.drawing.split(';');
                    for (let i = 1; i < (strokeList.length - 1); i++) {
                        ctx.beginPath();
                        ctx.moveTo(parseInt(strokeList[i].slice(0, 2), 16), parseInt(strokeList[i].slice(2, 4), 16));
                        ctx.lineTo(parseInt(strokeList[i].slice(4, 6), 16), parseInt(strokeList[i].slice(6, 8), 16));
                        ctx.strokeStyle = colorMap[parseInt(strokeList[i].slice(8, 9), 16)];
                        ctx.lineWidth = parseInt(strokeList[i].slice(9, 10), 16);
                        ctx.stroke();
                    }
                }

                lastFrame = lastFrame + 1;
                callFrame();
            }
        })
    }

    function drawWord() {
        var diff = (startTime - Date.now());
        if (diff < 0) {
            startTime = startTime + pauseTime;
            drawTime = false;
            ctx.clearRect(0, 0, whiteBoard.width, whiteBoard.height);
            isDrawing = false;
            clearInterval(ticktock);

            drawIndex = drawIndex + 1;
            if (drawIndex == rounds && guessIndex == rounds) {
                completeGame();
            }
            else {
                ticktock = setInterval(transitionGame, frameRate);
                word = "";

                if (drawIndex < rounds) {
                    $.ajax({
                        url: "/GetKthWord",
                        type: "GET",
                        data: { drawIndex: drawIndex }
                    }).done(response => {
                        if (response.success) {
                            word = response.word;
                        }
                    });
                }

                wordPlaceholder.innerText = "";
            }
        }
        else {
            timer.innerHTML = "Draw" + (Math.ceil(diff / 1000)).toString();

            $.ajax({
                url: "/CorrectlyGuessedWord",
                type: "GET",
                data: { drawIndex: drawIndex }
            }).done(response => {
                if (response.success) {
                    var saveTime = response.saveTime;
                    startTime = startTime + pauseTime - saveTime * 1000;
                    drawTime = false;
                    ctx.clearRect(0, 0, whiteBoard.width, whiteBoard.height);

                    clearInterval(ticktock);

                    drawIndex = drawIndex + 1;
                    if (drawIndex == rounds && guessIndex == rounds) {
                        completeGame();
                    }
                    else {
                        ticktock = setInterval(transitionGame, frameRate);
                        word = "";

                        if (drawIndex < rounds) {
                            $.ajax({
                                url: "/GetKthWord",
                                type: "GET",
                                data: { drawIndex: drawIndex }
                            }).done(response => {
                                if (response.success) {
                                    word = response.word;
                                }
                            });
                        }

                        wordPlaceholder.innerText = "";
                    }
                }
            });

            var ithFrame = Math.floor((roundTime + Date.now() - startTime) / frameRate);
            for (let i = 0; i < ithFrame; i++){
                if (drawTrue[i] == false) {
                    $.ajax({
                        url: "/RecordIthFrameDrawing",
                        data: { drawIndex: drawIndex, frameIndex: i, drawing: drawString[i] }
                    })
                    drawTrue[i] = true;
                }
            }
        }
    }

    inputWord.addEventListener('keydown', function (event) {
        if (event.key == 'Enter') {
            var saveTime = Math.floor((startTime - Date.now()) / 1000) - 3;
            $.ajax({
                url: "/GuessWord",
                type: "GET",
                data: { word: inputWord.value, guessIndex: guessIndex, saveTime: saveTime }
            }).done(response => {
                if (response.success) {
                    if (response.correct) {
                        startTime = startTime + pauseTime - saveTime * 1000;
                        clearInterval(ticktock);

                        inputWord.disabled = true;

                        guessIndex = guessIndex + 1;
                        if (drawIndex == rounds && guessIndex == rounds) {
                            completeGame();
                        }
                        else {
                            ticktock = setInterval(transitionGame, frameRate);
                        }
                    }
                }
            });

            inputWord.value = "";
        }
    });

    whiteBoard.addEventListener('mousedown', function (e) {
        if (drawTime){
            isDrawing = true;
            startX = e.offsetX;
            startY = e.offsetY;
        }
    })

    whiteBoard.addEventListener('mousemove', function (e) {
        if (isDrawing) {
            ctx.beginPath();
            ctx.moveTo(startX, startY);
            ctx.lineTo(e.offsetX, e.offsetY);
            ctx.strokeStyle = colorMap[colorId];
            ctx.lineWidth = widthId;
            ctx.stroke();

            var ithFrame = Math.floor((roundTime + Date.now() - startTime) / frameRate);
            if (ithFrame >= 0 && ithFrame < totalFrames) {                
                drawString[ithFrame] = drawString[ithFrame] + startX.toString(16).padStart(2, '0') + startY.toString(16).padStart(2, '0') + e.offsetX.toString(16).padStart(2, '0') + e.offsetY.toString(16).padStart(2, '0') + colorId.toString(16) + widthId.toString() + ";";
            }

            startX = e.offsetX;
            startY = e.offsetY;
        }
    })

    whiteBoard.addEventListener('mouseup', () => isDrawing = false);
    whiteBoard.addEventListener('mouseout', () => isDrawing = false);


    function completeGame() {
        timer.innerHTML = "DONE";
    }

</script>
